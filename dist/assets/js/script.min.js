const newTask=document.getElementById("new-task"),add=document.getElementById("add"),tasks=document.getElementById("tasks"),toDoList=document.querySelector(".toDo__list"),forTask=[],forCopleted=[];let task,comleted;if(toDoList){const a=toDoList.querySelectorAll(".toDo__task");a.forEach(e=>{var t=e.querySelector(".toDo__task-text").innerText,e=e.id;task={id:e,text:t,isComplete:!1},forTask.push(task)})}const taskMassive=forTask;function addTask(e,t){var s=Date.now();t.push({id:s,text:e,isComplete:!1})}function isNotHaveTask(t,e){let s=!0;return e.forEach(e=>{e.text===t&&(alert("задача существует"),s=!1)}),s}function tasksRender(e){let a="";e.forEach(e=>{var t=e.isComplete?"toDo__task toDo__task_complete":"toDo__task",s=e.isComplete?"checked":"",t=`<div id = "${e.id}" class="${t}">
    <label class="toDo__checkbox">
      <input type="checkbox" ${s} />
      <div class="toDo__checkbox-div">
        <div class="toDo__checkbox-div__innner"></div>
      </div>
    </label>
    <div class="toDo__task-text">${e.text}</div>
    <button class="toDo__task-del">
                      <img
                        class="toDo__task-del__img"
                        src="./assets/images/close.svg"
                        alt="close"
                      />
    </button>
  </div>
`;a+=t}),tasks.innerHTML=a,renderTaskCount(forCopleted)}function changeTaskStatus(t,e){e.forEach(e=>{e.id==t&&(e.isComplete=!e.isComplete,forCopleted.push(e))}),console.log(forCopleted.length)}function deleteTask(s,a){a.forEach((e,t)=>{e.id==s&&a.splice(t,1)})}function renderTaskCount(e){document.getElementById("count").innerHTML=taskMassive.length-e.length}renderTaskCount(forCopleted),add.addEventListener("click",()=>{var e=newTask.value;e&&isNotHaveTask(e,taskMassive)&&(addTask(e,taskMassive),newTask.value="",tasksRender(taskMassive))}),tasks.addEventListener("click",e=>{var e=e.target,t=e.classList.contains("toDo__checkbox-div__innner"),s=e.classList.contains("toDo__task-del__img");t&&(changeTaskStatus((t=e.parentElement.parentElement.parentElement).getAttribute("id"),taskMassive),tasksRender(taskMassive),renderTaskCount(forCopleted),console.log(t)),s&&(deleteTask(e.parentElement.parentElement.getAttribute("id"),taskMassive),tasksRender(taskMassive),renderTaskCount(forCopleted))});const header__btn=document.querySelector(".header-icon");function addDark(){try{"dark"===localStorage.getItem("theme")?document.querySelector("html").classList.add("dark"):document.querySelector("html").classList.remove("dark")}catch(e){}}header__btn.addEventListener("click",e=>{e.preventDefault(),"dark"===localStorage.getItem("theme")?localStorage.removeItem("theme"):localStorage.setItem("theme","dark"),addDark()}),addDark();